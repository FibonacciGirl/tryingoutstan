{
    "collab_server" : "",
    "contents" : "library(jsonlite)\nlibrary(ggplot2)\nsource('scripts/Likelihood 2/Model_predict.R')\nsource('scripts/Likelihood 2/create recovery data.R')\n\n\nplot.data.fits<-function(subject.data, fit=NULL,   model=  c('power.constant',\n                                                        'exponential.constant',\n                                                        'power.logistic',\n                                                        'exponential.logistic',\n                                                        'power.power',\n                                                        'power.exponential',\n                                                        'exponential.power',\n                                                        'exponential.exponential',\n                                                        'piecewise.power.constant',\n                                                        'piecewise.exponential.constant')){\n  #subject<- unique(subject.data$subject)\n\n  \n  # if(!is.numeric(subject)){\n  #   title<- subject\n  # }\n  # else{\n  #   title<-paste('Subject', subject)\n  # }\n  # \n  \n  if(!is.null(fit) && any(!is.na(model))){\n    line.fit <- expand.grid(t=1:72, model= model)\n    \n    \n    line.fit$predictable <- mapply(function(m,t){\n      if(m == 'power.constant'){\n        params<-model.params(fit, 'power.constant')\n        params<-head(params,-1)\n        return(power.constant.model.predict(t, params[1],params[2],params[3],params[4])[2])\n      }\n      if(m == 'exponential.constant'){\n        params<-model.params(fit, 'exponential.constant')\n        params<-head(params,-1)\n        return(exponential.constant.model.predict(t,params[1],params[2],params[3],params[4])[2])\n      }\n      if(m == 'power.logistic'){\n        params<-model.params(fit, 'power.logistic')\n        params<-head(params,-1)\n        return(power.logistic.model.predict(t, params[1],params[2],params[3],params[4],params[5],params[6],params[7])[2])\n      }\n      if(m == 'exponential.logistic'){\n        params<-model.params(fit, 'exponential.logistic')\n        params<-head(params,-1)\n        return(exponential.logistic.model.predict(t,params[1],params[2],params[3],params[4],params[5],params[6],params[7])[2])\n      }\n      if(m == 'power.power'){\n        params<-model.params(fit, 'power.power')\n        params<-head(params,-1)\n        return(power.power.model.predict(t,params[1],params[2],params[3],params[4],params[5],params[6])[2])\n      }\n      if(m == 'power.exponential'){\n        params<-model.params(fit, 'power.exponential')\n        params<-head(params,-1)\n        return(power.exponential.model.predict(t,params[1],params[2],params[3],params[4],params[5],params[6])[2])\n      }\n      if(m == 'exponential.power'){\n        params<-model.params(fit, 'exponential.power')\n        params<-head(params,-1)\n        return(exponential.power.model.predict(t,params[1],params[2],params[3],params[4],params[5],params[6])[2])\n      }\n      if(m == 'exponential.exponential'){\n        params<-model.params(fit, 'exponential.exponential')\n        params<-head(params,-1)\n        return(exponential.exponential.model.predict(t,params[1],params[2],params[3],params[4],params[5],params[6])[2])\n      }\n      if(m == 'piecewise.power.constant'){\n        params<-model.params(fit, 'piecewise.power.constant')\n        print(params)\n        params<-head(params,-1)\n        print(params)\n        return(piecewise.power.constant.model.predict(t, params[1],params[2],params[3],params[4],params[5],params[6])[2])\n      }\n      if(m == 'piecewise.exponential.constant'){\n        params<-model.params(fit, 'piecewise.exponential.constant')\n        params<-head(params,-1)\n        return(piecewise.exponential.constant.model.predict(t, params[1],params[2],params[3],params[4],params[5],params[6])[2])\n      }\n    },line.fit$model, line.fit$t)\n    \n    line.fit$unpredictable <- mapply(function(m,t){\n      if(m == 'power.constant'){\n        params<-model.params(fit, 'power.constant')\n        params<-head(params,-1)\n        return(power.constant.model.predict(t, params[1],params[2],params[3],params[4])[1])\n      }\n      if(m == 'exponential.constant'){\n        params<-model.params(fit, 'exponential.constant')\n        params<-head(params,-1)\n        return(exponential.constant.model.predict(t,params[1],params[2],params[3],params[4])[1])\n      }\n      if(m == 'power.logistic'){\n        params<-model.params(fit, 'power.logistic')\n        params<-head(params,-1)\n        return(power.logistic.model.predict(t, params[1],params[2],params[3],params[4],params[5],params[6],params[7])[1])\n      }\n      if(m == 'exponential.logistic'){\n        params<-model.params(fit, 'exponential.logistic')\n        params<-head(params,-1)\n        return(exponential.logistic.model.predict(t,params[1],params[2],params[3],params[4],params[5],params[6],params[7])[1])\n      }\n      if(m == 'power.power'){\n        params<-model.params(fit, 'power.power')\n        params<-head(params,-1)\n        return(power.power.model.predict(t,params[1],params[2],params[3],params[4],params[5],params[6])[1])\n      }\n      if(m == 'power.exponential'){\n        params<-model.params(fit, 'power.exponential')\n        params<-head(params,-1)\n        return(power.exponential.model.predict(t,params[1],params[2],params[3],params[4],params[5],params[6])[1])\n      }\n      if(m == 'exponential.power'){\n        params<-model.params(fit, 'exponential.power')\n        params<-head(params,-1)\n        return(exponential.power.model.predict(t,params[1],params[2],params[3],params[4],params[5],params[6])[1])\n      }\n      if(m == 'exponential.exponential'){\n        params<-model.params(fit, 'exponential.exponential')\n        params<-head(params,-1)\n        return(exponential.exponential.model.predict(t,params[1],params[2],params[3],params[4],params[5],params[6])[1])\n      }\n      if(m == 'piecewise.power.constant'){\n        params<-model.params(fit, 'piecewise.power.constant')\n        print(params)\n        params<-head(params,-1)\n        print(params)\n        return(piecewise.power.constant.model.predict(t, params[1],params[2],params[3],params[4],params[5],params[6])[1])\n      }\n      if(m == 'piecewise.exponential.constant'){\n        params<-model.params(fit, 'piecewise.exponential.constant')\n        params<-head(params,-1)\n        return(piecewise.exponential.constant.model.predict(t, params[1],params[2],params[3],params[4],params[5],params[6])[1])\n      }\n    },line.fit$model, line.fit$t)\n    #line.fit$model<-sapply(line.fit$model,extract.model.name)\n    \n    # p<-list()\n    # i<-0\n    # for(m in model){\n    #   i<-i+1\n    # \n    #   plot.data<-subset(line.fit, model == m)\n    # \n    #   print(subject.data)\n    #   print(plot.data)\n    # \n    # \n    #   p[[i]]<-ggplot()+\n    #     geom_point(subject.data, aes(x=t,y=predictable))+\n    #     geom_point(aes(x=t,y=unpredictable))+\n    #     geom_line(plot.data, aes(x=t,y=predictable))+\n    #     geom_line(plot.data, aes(x=t,y=unpredictable))+\n    #     ggtitle(title=title, subtitle =  toString(m))+\n    #     theme_bw()\n    # }\n    # \n    # p<-arrangeGrob(grobs = p)\n    \n    pred<-data.frame(t = line.fit$t , rt = line.fit$predictable, type = 'predictable',model = line.fit$model)\n    unpred<-data.frame(t = line.fit$t, rt = line.fit$unpredictable, type = 'unpredictable',model = line.fit$model)\n    subject.pred<-data.frame(t= subject.data$t, rt= subject.data$predictable, type = rep('predictable',length(subject.data$t)))\n    subject.unpred<-data.frame(t= subject.data$t, rt = subject.data$unpredictable, type = rep('unpredictable',length(subject.data$t)))\n    \n\n    plot.data<-rbind(pred,unpred)\n    sub.data<-rbind(subject.pred,subject.unpred)\n\n\n    p<-ggplot()+\n      geom_point(data=sub.data,aes(x=t, y =rt,col=type))+\n      geom_line(data=plot.data,aes(x=t, y =rt,col=type,linetype=model ))+\n      # ggtitle(title)+\n      theme_bw()\n      \n    \n    # p<-ggplot(subject.data, aes(x=t, y=predictable)) +\n    #   geom_point()+\n    #   geom_line(data=line.fit, aes(x=t, y=predictable, color=model), size=.5)+\n    #   ggtitle(title)+\n    #   theme_minimal()\n    # up<-ggplot(subject.data, aes(x=t, y=unpredictable)) +\n    #   geom_point()+\n    #   geom_line(data=line.fit, aes(x=t, y=unpredictable, color=model), size=.5)+\n    #   ggtitle(title)+\n    #   theme_minimal()\n  }\n  # \n  else{\n    subject.pred<-data.frame(t= subject.data$t, rt= subject.data$predictable, type = rep('predictable',length(subject.data$t)))\n    subject.unpred<-data.frame(t= subject.data$t, rt = subject.data$unpredictable, type = rep('unpredictable',length(subject.data$t)))\n\n    sub.data<-rbind(subject.pred,subject.unpred)\n    \n\n    p<-ggplot(sub.data) +\n      geom_point(aes(x=t, y =rt,col=type))+\n      #ggtitle(title)+\n      theme_minimal()\n  }\n\n  # p<-arrangeGrob(grobs = list(p,up))\n  # return(plot(p))\n  # \n  return(p)\n}\n\nplot.model.fit<-function(which.subject, model=  c('constant',\n                                                                      'power',\n                                                                      'exponential', \n                                                                      #c('generalized.logistic'),\n                                                                      'constant.constant',\n                                                                      'constant.power',\n                                                                      'constant.exponential',\n                                                                      'power.constant',\n                                                                      'power.power',\n                                                                      'power.exponential',\n                                                                      'exponential.constant',\n                                                                      'exponential.power',\n                                                                      'exponential.exponential'))\n  {\n  subject.data<-subset(model.data, subject == which.subject)\n\n  fit.data<-read_json(paste('fit_data/Likelihood/subject',which.subject,'fit.likelihood.json',sep=\".\"))\n  p<-plot.data.fits(subject.data,fit.data)\n  return(p)\n}\n\n\nall.data.fits.list<-function(which.subjects){\n  likelihood.fits<-list()\n  for(i in which.subjects){\n    j<-which(which.subjects == i)\n    \n    likelihood.fits[[j]]<-paste('fit_data/Likelihood/subject',i,'fit.likelihood.json',sep='.')\n  }\n  return(likelihood.fits)\n}\n\n\nconvert.recovery.data<-function(json){\n  subject.data<-read_json(json)\n  \n  t<-c()\n  model<-c()\n  predictable<-c()\n  unpredictable<-c()\n  for(i in 1:length(subject.data)){\n    t<-c(t,subject.data[[i]]$t)\n    model<-c(model,subject.data[[i]]$model)\n    predictable<-c(predictable,subject.data[[i]]$predictable)\n    unpredictable<-c(unpredictable,subject.data[[i]]$unpredictable)\n  }\n  subject.data<-data.frame(t=t,model=model,unpredictable= unpredictable,predictable=predictable)\n  return(subject.data)\n}\n\n\n\n\nlik.fit.function<-function(fit){\n  \n  lik<-c('power.constant'= fit$power.constant$Likelihood,\n         'exponential.constant'=fit$exponential.constant$Likelihood,\n         'power.logistic'= fit$power.logistic$Likelihood,\n         'exponential.logistic'= fit$exponential.logistic$Likelihood,\n         'power.power'= fit$power.power$Likelihood,\n         'power.exponential'=fit$power.exponential$Likelihood,\n         'exponential.power'=fit$exponential.power$Likelihood,\n         'exponential.exponential'=fit$exponential.exponential$Likelihood,\n         'piecewise.power.constant'=fit$piecewise.power.constant$Likelihood,\n         'piecewise.exponential.constant'=fit$piecewise.exponential.constant$Likelihood\n         )\n  \n  return(lik)\n}\n\n\nAICc<-function(likelihood, model){\n  k<-numeric()\n  \n  if(model == 'power.constant'){\n    k=5\n  }\n  if( model == 'exponential.constant'){\n    k=5\n  }\n  if(model == 'power.power'){\n    k=7\n  }\n  if(model =='power.exponential'){\n    k=7\n  }\n  if(model == 'power.logistic'){\n    k=8\n  }\n  if(model == 'exponential.logistic'){\n    k=8\n  }\n  if(model == 'piecewise.exponential.constant'){\n    k=7\n  }\n  if(model=='piecewise.power.constant'){\n    k=7\n  }\n  if(model=='exponential.power'){\n    k=7\n  }\n  if(model=='exponential.exponential'){\n    k=7\n  }\n  \n  n=72\n  aic<-2*(k + likelihood)\n  aicc<-AIC.correction(aic,n,k)\n  return(aicc)  \n}\n\n\nAIC.correction<-function(aic,n,k){\n  return(aic + (2*k*(k+1))/(n - k -1 ))\n}\n\n\nbest.fit.AICc<-function(list.fits){\n  n<-length(list.fits)\n  best.fit<-array(dim=array(n,2))\n  \n  for(i in 1:n){\n\n    fit<-read_json(list.fits[[i]])\n    \n    lik<-lik.fit.function(fit)\n    \n    model=c(  'power.constant',\n              'exponential.constant',\n              'power.logistic',\n              'exponential.logistic',\n              'power.power',\n              'power.exponential',\n              'exponential.power',\n              'exponential.exponential',\n              'piecewise.power.constant',\n              'piecewise.exponential.constant')\n    \n    aicc<- mapply(AICc, lik, model)\n    \n    best.fit[i,1]<-names(which.min(aicc))\n    best.fit[i,2]<-min(as.numeric(aicc))\n  }\n  best.fit<-data.frame(model = best.fit[,1], aic = best.fit[,2])\n\n  return(best.fit)\n}\n\n\n\n\n\n##still need to fix to plot the figure\nplot.group.model<-function(list.fits,model.data,model){\n    p<-list()\n    subjects<-which(best.fit.AICc(list.fits)$model == model)\n    \n    p[[1]]<-plot.group(model.data,subjects,model) \n    \n    \n    fits<-list()\n    aicc<-c()\n    i<-0\n    for(s in subjects){\n      i<-i+1\n      fits[[i]]<-list.fits[[s]]\n      \n      lik<-lik.fit.function(fits[[i]])\n      aicc<-mapply(AICc,lik,MoreArgs = list(model))\n    }\n    lik<-lik.fit.function(fits[[i]])\n    aicc<-mapply(AIC.correction,lik,MoreArgs = list(model))\n    \n\n    \n    subject.index<-list(s1<-which.min(maps$map),\n    s2<-which.min(maps$map[-s1]),\n    s3<-which.max(maps$map)[c(-s1,-s2)],\n    s4<-which.max(maps$map[c(-s1,-s2,-s3)]))\n    \n\n    i<-0\n    for(s in subject.index){\n      s.num<-as.numeric(s)\n\n      i<-i+1\n      \n\n      sub<-maps$subject[s.num]\n\n\n      s.data<-subset(model.data, subject == sub)\n      \n      \n      fit<-read_json(fits[[s.num]])\n    \n      \n      p[[i+1]]<-plot.data.fits(subject.data=s.data,fit,model)\n      \n    }\n    \n    multiplot(p[[1]],p[[2]],p[[3]],p[[4]],p[[5]], layout = matrix(c(1,1,2,3,1,1,4,5),nrow=2,byrow=T))\n    \n}\n\n\n\n\nplot.group<-function(all.data, fits, model){\n  \n  best.fit<-best.fit.AICc(fits)$model\n  subjects<-which(best.fit == model)\n  \n  \n  fit.data<-subset(all.data, subject %in% subjects)\n  not.fit.data<-subset(all.data, !(subject %in% subjects))\n  \n  n.a<-length(all.data$t)\n  n.m<-length(fit.data$t)\n  n.n.m<-length(not.fit.data$t)\n  \n  all.data$group<-rep('all',n.a)\n  fit.data$group<-rep('best fit subjects', n.m)\n  not.fit.data$group<-rep('all with best fit subjects removed',n.n.m)\n  \n  \n  all.pred<-data.frame(t = all.data$t , rt = all.data$predictable, type = rep('predictable',n.a),group = all.data$group)\n  all.unpred<-data.frame(t = all.data$t, rt = all.data$unpredictable, type = rep('unpredictable',n.a),group = all.data$group)\n  fit.pred<-data.frame(t= fit.data$t, rt= fit.data$predictable, type = rep('predictable',n.m), group = fit.data$group)\n  fit.unpred<-data.frame(t= fit.data$t, rt = fit.data$unpredictable, type = rep('unpredictable',n.m), group = fit.data$group)\n  not.fit.pred<-data.frame(t= not.fit.data$t, rt= not.fit.data$predictable, type = rep('predictable',n.n.m), group = not.fit.data$group)\n  not.fit.unpred<-data.frame(t= not.fit.data$t, rt= not.fit.data$unpredictable, type = rep('unpredictable',n.n.m), group = not.fit.data$group)\n\n  \n  all.plot.data<-rbind(all.pred,all.unpred)\n  fit.plot.data<-rbind(fit.pred,fit.unpred)\n  not.fit.plot.data<-rbind(not.fit.pred,not.fit.unpred)\n  \n  plot.data<-rbind(all.plot.data,fit.plot.data,not.fit.plot.data)\n  title<-extract.model.name(model)\n  \np<-ggplot(plot.data)+\n  geom_smooth(aes(x=t,y=rt, col=group,linetype = type), se =F)+\n  ggtitle(paste('All subjects vs. subjects best fit by', title,'model', sep=' '))+\n  xlab (\"Appearance Count\")+\n  ylab ('Response Time')+\n  ylim(0,2000)+\n  theme_bw()\n\nreturn(p)\n}\n\n\n\nexclude.subjects<-function(model.data){\n  \n  subjects<-c()\n  n<-length(unique(model.data$subject))\n\n  for(i in 1:n){\n    which.subject = i\n    subject.data<-subset(model.data, subject == which.subject)\n    exclude<-0\n    \n\n    for(j in 1:6){\n      time.data<-subset(subject.data$t, subject.data$t %in% c(((j-1)*(12)+1):(j*12)))\n\n      if(length(time.data) < 4){\n        exclude<-exclude+1\n      }\n    }\n    if(exclude >= 1){\n      model.data<-subset(model.data, !(subject %in% which.subject))\n      subjects<-c(subjects,which.subject)\n    }\n\n  }\n  #return(model.data)\n  return(subjects)\n}\n\n\n",
    "created" : 1498743672588.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2640757594",
    "id" : "45DB6097",
    "lastKnownWriteTime" : 1498227681,
    "last_content_update" : 1498227681,
    "path" : "~/GitHub/shape_of_sl/scripts/Likelihood 2/Visualize models.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}